/*
 * Collection Service
 *
 * API for managing collection
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using product-list.Client;
using product-list.Client.Auth;
using product-list.Model;

namespace product-list.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductListApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk update collection associations position
        /// </summary>
        /// <remarks>
        /// The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RpcStatus</returns>
        RpcStatus BulkUpdateProductListAssociations(ProductlistBulkUpdateProductListAssociationsRequest body, int operationIndex = 0);

        /// <summary>
        /// Bulk update collection associations position
        /// </summary>
        /// <remarks>
        /// The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RpcStatus</returns>
        ApiResponse<RpcStatus> BulkUpdateProductListAssociationsWithHttpInfo(ProductlistBulkUpdateProductListAssociationsRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Collection
        /// </summary>
        /// <remarks>
        /// The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistCreateProductListResponse</returns>
        ProductlistCreateProductListResponse CreateProductList(ProductlistCreateProductListRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Collection
        /// </summary>
        /// <remarks>
        /// The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistCreateProductListResponse</returns>
        ApiResponse<ProductlistCreateProductListResponse> CreateProductListWithHttpInfo(ProductlistCreateProductListRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Collection/Product Association
        /// </summary>
        /// <remarks>
        /// The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistCreateProductListAssociationResponse</returns>
        ProductlistCreateProductListAssociationResponse CreateProductListAssociation(ProductlistCreateProductListAssociationRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Collection/Product Association
        /// </summary>
        /// <remarks>
        /// The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistCreateProductListAssociationResponse</returns>
        ApiResponse<ProductlistCreateProductListAssociationResponse> CreateProductListAssociationWithHttpInfo(ProductlistCreateProductListAssociationRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Collection
        /// </summary>
        /// <remarks>
        /// The DeleteProductList endpoint is used to delete an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistDeleteProductListResponse</returns>
        ProductlistDeleteProductListResponse DeleteProductList(ProductlistDeleteProductListRequest body, int operationIndex = 0);

        /// <summary>
        /// Delete Collection
        /// </summary>
        /// <remarks>
        /// The DeleteProductList endpoint is used to delete an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistDeleteProductListResponse</returns>
        ApiResponse<ProductlistDeleteProductListResponse> DeleteProductListWithHttpInfo(ProductlistDeleteProductListRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Collection/Product Association
        /// </summary>
        /// <remarks>
        /// The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistDeleteProductListAssociationResponse</returns>
        ProductlistDeleteProductListAssociationResponse DeleteProductListAssociation(ProductlistDeleteProductListAssociationRequest body, int operationIndex = 0);

        /// <summary>
        /// Delete Collection/Product Association
        /// </summary>
        /// <remarks>
        /// The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistDeleteProductListAssociationResponse</returns>
        ApiResponse<ProductlistDeleteProductListAssociationResponse> DeleteProductListAssociationWithHttpInfo(ProductlistDeleteProductListAssociationRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Collection/Product Associations by Product GRN
        /// </summary>
        /// <remarks>
        /// The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListAssociationsByProductGrnResponse</returns>
        ProductlistGetProductListAssociationsByProductGrnResponse GetProductListAssociationsByProductGrn(ProductlistGetProductListAssociationsByProductGrnRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Collection/Product Associations by Product GRN
        /// </summary>
        /// <remarks>
        /// The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListAssociationsByProductGrnResponse</returns>
        ApiResponse<ProductlistGetProductListAssociationsByProductGrnResponse> GetProductListAssociationsByProductGrnWithHttpInfo(ProductlistGetProductListAssociationsByProductGrnRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Collection by Code
        /// </summary>
        /// <remarks>
        /// The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListByCodeResponse</returns>
        ProductlistGetProductListByCodeResponse GetProductListByCode(ProductlistGetProductListByCodeRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Collection by Code
        /// </summary>
        /// <remarks>
        /// The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListByCodeResponse</returns>
        ApiResponse<ProductlistGetProductListByCodeResponse> GetProductListByCodeWithHttpInfo(ProductlistGetProductListByCodeRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Collection by Id
        /// </summary>
        /// <remarks>
        /// The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListByIdResponse</returns>
        ProductlistGetProductListByIdResponse GetProductListById(ProductlistGetProductListByIdRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Collection by Id
        /// </summary>
        /// <remarks>
        /// The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListByIdResponse</returns>
        ApiResponse<ProductlistGetProductListByIdResponse> GetProductListByIdWithHttpInfo(ProductlistGetProductListByIdRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Collection by Url Key
        /// </summary>
        /// <remarks>
        /// The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListByUrlKeyResponse</returns>
        ProductlistGetProductListByUrlKeyResponse GetProductListByUrlKey(ProductlistGetProductListByUrlKeyRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Collection by Url Key
        /// </summary>
        /// <remarks>
        /// The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListByUrlKeyResponse</returns>
        ApiResponse<ProductlistGetProductListByUrlKeyResponse> GetProductListByUrlKeyWithHttpInfo(ProductlistGetProductListByUrlKeyRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Collection Product Count
        /// </summary>
        /// <remarks>
        /// The GetProductListsCount endpoint is used to get the number of products associated with a collection.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListsCountResponse</returns>
        ProductlistGetProductListsCountResponse GetProductListsCount(ProductlistGetProductListsCountRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Collection Product Count
        /// </summary>
        /// <remarks>
        /// The GetProductListsCount endpoint is used to get the number of products associated with a collection.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListsCountResponse</returns>
        ApiResponse<ProductlistGetProductListsCountResponse> GetProductListsCountWithHttpInfo(ProductlistGetProductListsCountRequest body, int operationIndex = 0);
        /// <summary>
        /// List Collection/Product Associations
        /// </summary>
        /// <remarks>
        /// The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistListProductListAssociationsResponse</returns>
        ProductlistListProductListAssociationsResponse ListProductListAssociations(ProductlistListProductListAssociationsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Collection/Product Associations
        /// </summary>
        /// <remarks>
        /// The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistListProductListAssociationsResponse</returns>
        ApiResponse<ProductlistListProductListAssociationsResponse> ListProductListAssociationsWithHttpInfo(ProductlistListProductListAssociationsRequest body, int operationIndex = 0);
        /// <summary>
        /// List Collections
        /// </summary>
        /// <remarks>
        /// The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistListProductListsResponse</returns>
        ProductlistListProductListsResponse ListProductLists(ProductlistListProductListsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Collections
        /// </summary>
        /// <remarks>
        /// The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistListProductListsResponse</returns>
        ApiResponse<ProductlistListProductListsResponse> ListProductListsWithHttpInfo(ProductlistListProductListsRequest body, int operationIndex = 0);
        /// <summary>
        /// Search Collections
        /// </summary>
        /// <remarks>
        /// The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistSearchProductListsResponse</returns>
        ProductlistSearchProductListsResponse SearchProductLists(ProductlistSearchProductListsRequest body, int operationIndex = 0);

        /// <summary>
        /// Search Collections
        /// </summary>
        /// <remarks>
        /// The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistSearchProductListsResponse</returns>
        ApiResponse<ProductlistSearchProductListsResponse> SearchProductListsWithHttpInfo(ProductlistSearchProductListsRequest body, int operationIndex = 0);
        /// <summary>
        /// Search Collections by Ids
        /// </summary>
        /// <remarks>
        /// The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistSearchProductListsByIdsResponse</returns>
        ProductlistSearchProductListsByIdsResponse SearchProductListsByIds(ProductlistSearchProductListsByIdsRequest body, int operationIndex = 0);

        /// <summary>
        /// Search Collections by Ids
        /// </summary>
        /// <remarks>
        /// The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistSearchProductListsByIdsResponse</returns>
        ApiResponse<ProductlistSearchProductListsByIdsResponse> SearchProductListsByIdsWithHttpInfo(ProductlistSearchProductListsByIdsRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Collection
        /// </summary>
        /// <remarks>
        /// The UpdateProductList endpoint is used to update an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistUpdateProductListResponse</returns>
        ProductlistUpdateProductListResponse UpdateProductList(ProductlistUpdateProductListRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Collection
        /// </summary>
        /// <remarks>
        /// The UpdateProductList endpoint is used to update an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistUpdateProductListResponse</returns>
        ApiResponse<ProductlistUpdateProductListResponse> UpdateProductListWithHttpInfo(ProductlistUpdateProductListRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductListApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Bulk update collection associations position
        /// </summary>
        /// <remarks>
        /// The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RpcStatus</returns>
        System.Threading.Tasks.Task<RpcStatus> BulkUpdateProductListAssociationsAsync(ProductlistBulkUpdateProductListAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk update collection associations position
        /// </summary>
        /// <remarks>
        /// The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RpcStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<RpcStatus>> BulkUpdateProductListAssociationsWithHttpInfoAsync(ProductlistBulkUpdateProductListAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Collection
        /// </summary>
        /// <remarks>
        /// The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistCreateProductListResponse</returns>
        System.Threading.Tasks.Task<ProductlistCreateProductListResponse> CreateProductListAsync(ProductlistCreateProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Collection
        /// </summary>
        /// <remarks>
        /// The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistCreateProductListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistCreateProductListResponse>> CreateProductListWithHttpInfoAsync(ProductlistCreateProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Collection/Product Association
        /// </summary>
        /// <remarks>
        /// The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistCreateProductListAssociationResponse</returns>
        System.Threading.Tasks.Task<ProductlistCreateProductListAssociationResponse> CreateProductListAssociationAsync(ProductlistCreateProductListAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Collection/Product Association
        /// </summary>
        /// <remarks>
        /// The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistCreateProductListAssociationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistCreateProductListAssociationResponse>> CreateProductListAssociationWithHttpInfoAsync(ProductlistCreateProductListAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Collection
        /// </summary>
        /// <remarks>
        /// The DeleteProductList endpoint is used to delete an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistDeleteProductListResponse</returns>
        System.Threading.Tasks.Task<ProductlistDeleteProductListResponse> DeleteProductListAsync(ProductlistDeleteProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Collection
        /// </summary>
        /// <remarks>
        /// The DeleteProductList endpoint is used to delete an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistDeleteProductListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistDeleteProductListResponse>> DeleteProductListWithHttpInfoAsync(ProductlistDeleteProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Collection/Product Association
        /// </summary>
        /// <remarks>
        /// The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistDeleteProductListAssociationResponse</returns>
        System.Threading.Tasks.Task<ProductlistDeleteProductListAssociationResponse> DeleteProductListAssociationAsync(ProductlistDeleteProductListAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Collection/Product Association
        /// </summary>
        /// <remarks>
        /// The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistDeleteProductListAssociationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistDeleteProductListAssociationResponse>> DeleteProductListAssociationWithHttpInfoAsync(ProductlistDeleteProductListAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Collection/Product Associations by Product GRN
        /// </summary>
        /// <remarks>
        /// The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListAssociationsByProductGrnResponse</returns>
        System.Threading.Tasks.Task<ProductlistGetProductListAssociationsByProductGrnResponse> GetProductListAssociationsByProductGrnAsync(ProductlistGetProductListAssociationsByProductGrnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Collection/Product Associations by Product GRN
        /// </summary>
        /// <remarks>
        /// The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListAssociationsByProductGrnResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistGetProductListAssociationsByProductGrnResponse>> GetProductListAssociationsByProductGrnWithHttpInfoAsync(ProductlistGetProductListAssociationsByProductGrnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Collection by Code
        /// </summary>
        /// <remarks>
        /// The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListByCodeResponse</returns>
        System.Threading.Tasks.Task<ProductlistGetProductListByCodeResponse> GetProductListByCodeAsync(ProductlistGetProductListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Collection by Code
        /// </summary>
        /// <remarks>
        /// The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListByCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistGetProductListByCodeResponse>> GetProductListByCodeWithHttpInfoAsync(ProductlistGetProductListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Collection by Id
        /// </summary>
        /// <remarks>
        /// The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListByIdResponse</returns>
        System.Threading.Tasks.Task<ProductlistGetProductListByIdResponse> GetProductListByIdAsync(ProductlistGetProductListByIdRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Collection by Id
        /// </summary>
        /// <remarks>
        /// The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistGetProductListByIdResponse>> GetProductListByIdWithHttpInfoAsync(ProductlistGetProductListByIdRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Collection by Url Key
        /// </summary>
        /// <remarks>
        /// The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListByUrlKeyResponse</returns>
        System.Threading.Tasks.Task<ProductlistGetProductListByUrlKeyResponse> GetProductListByUrlKeyAsync(ProductlistGetProductListByUrlKeyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Collection by Url Key
        /// </summary>
        /// <remarks>
        /// The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListByUrlKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistGetProductListByUrlKeyResponse>> GetProductListByUrlKeyWithHttpInfoAsync(ProductlistGetProductListByUrlKeyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Collection Product Count
        /// </summary>
        /// <remarks>
        /// The GetProductListsCount endpoint is used to get the number of products associated with a collection.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListsCountResponse</returns>
        System.Threading.Tasks.Task<ProductlistGetProductListsCountResponse> GetProductListsCountAsync(ProductlistGetProductListsCountRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Collection Product Count
        /// </summary>
        /// <remarks>
        /// The GetProductListsCount endpoint is used to get the number of products associated with a collection.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListsCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistGetProductListsCountResponse>> GetProductListsCountWithHttpInfoAsync(ProductlistGetProductListsCountRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Collection/Product Associations
        /// </summary>
        /// <remarks>
        /// The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistListProductListAssociationsResponse</returns>
        System.Threading.Tasks.Task<ProductlistListProductListAssociationsResponse> ListProductListAssociationsAsync(ProductlistListProductListAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Collection/Product Associations
        /// </summary>
        /// <remarks>
        /// The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistListProductListAssociationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistListProductListAssociationsResponse>> ListProductListAssociationsWithHttpInfoAsync(ProductlistListProductListAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Collections
        /// </summary>
        /// <remarks>
        /// The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistListProductListsResponse</returns>
        System.Threading.Tasks.Task<ProductlistListProductListsResponse> ListProductListsAsync(ProductlistListProductListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Collections
        /// </summary>
        /// <remarks>
        /// The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistListProductListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistListProductListsResponse>> ListProductListsWithHttpInfoAsync(ProductlistListProductListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Collections
        /// </summary>
        /// <remarks>
        /// The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistSearchProductListsResponse</returns>
        System.Threading.Tasks.Task<ProductlistSearchProductListsResponse> SearchProductListsAsync(ProductlistSearchProductListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Collections
        /// </summary>
        /// <remarks>
        /// The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistSearchProductListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistSearchProductListsResponse>> SearchProductListsWithHttpInfoAsync(ProductlistSearchProductListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Collections by Ids
        /// </summary>
        /// <remarks>
        /// The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistSearchProductListsByIdsResponse</returns>
        System.Threading.Tasks.Task<ProductlistSearchProductListsByIdsResponse> SearchProductListsByIdsAsync(ProductlistSearchProductListsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Collections by Ids
        /// </summary>
        /// <remarks>
        /// The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistSearchProductListsByIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistSearchProductListsByIdsResponse>> SearchProductListsByIdsWithHttpInfoAsync(ProductlistSearchProductListsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Collection
        /// </summary>
        /// <remarks>
        /// The UpdateProductList endpoint is used to update an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistUpdateProductListResponse</returns>
        System.Threading.Tasks.Task<ProductlistUpdateProductListResponse> UpdateProductListAsync(ProductlistUpdateProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Collection
        /// </summary>
        /// <remarks>
        /// The UpdateProductList endpoint is used to update an existing collection of products within the system.
        /// </remarks>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistUpdateProductListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductlistUpdateProductListResponse>> UpdateProductListWithHttpInfoAsync(ProductlistUpdateProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductListApi : IProductListApiSync, IProductListApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductListApi : IProductListApi
    {
        private product-list.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductListApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductListApi(string basePath)
        {
            this.Configuration = product-list.Client.Configuration.MergeConfigurations(
                product-list.Client.GlobalConfiguration.Instance,
                new product-list.Client.Configuration { BasePath = basePath }
            );
            this.Client = new product-list.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new product-list.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = product-list.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductListApi(product-list.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = product-list.Client.Configuration.MergeConfigurations(
                product-list.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new product-list.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new product-list.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = product-list.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductListApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductListApi(product-list.Client.ISynchronousClient client, product-list.Client.IAsynchronousClient asyncClient, product-list.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = product-list.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public product-list.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public product-list.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public product-list.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public product-list.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Bulk update collection associations position The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RpcStatus</returns>
        public RpcStatus BulkUpdateProductListAssociations(ProductlistBulkUpdateProductListAssociationsRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<RpcStatus> localVarResponse = BulkUpdateProductListAssociationsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk update collection associations position The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RpcStatus</returns>
        public product-list.Client.ApiResponse<RpcStatus> BulkUpdateProductListAssociationsWithHttpInfo(ProductlistBulkUpdateProductListAssociationsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->BulkUpdateProductListAssociations");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.BulkUpdateProductListAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RpcStatus>("/productlist.ProductList/BulkUpdateProductListAssociations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkUpdateProductListAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk update collection associations position The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RpcStatus</returns>
        public async System.Threading.Tasks.Task<RpcStatus> BulkUpdateProductListAssociationsAsync(ProductlistBulkUpdateProductListAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<RpcStatus> localVarResponse = await BulkUpdateProductListAssociationsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk update collection associations position The BulkUpdateProductListAssociations endpoint updates the positions of specified associations.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RpcStatus)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<RpcStatus>> BulkUpdateProductListAssociationsWithHttpInfoAsync(ProductlistBulkUpdateProductListAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->BulkUpdateProductListAssociations");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.BulkUpdateProductListAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RpcStatus>("/productlist.ProductList/BulkUpdateProductListAssociations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkUpdateProductListAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Collection The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistCreateProductListResponse</returns>
        public ProductlistCreateProductListResponse CreateProductList(ProductlistCreateProductListRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistCreateProductListResponse> localVarResponse = CreateProductListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Collection The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistCreateProductListResponse</returns>
        public product-list.Client.ApiResponse<ProductlistCreateProductListResponse> CreateProductListWithHttpInfo(ProductlistCreateProductListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->CreateProductList");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.CreateProductList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistCreateProductListResponse>("/productlist.ProductList/CreateProductList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Collection The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistCreateProductListResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistCreateProductListResponse> CreateProductListAsync(ProductlistCreateProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistCreateProductListResponse> localVarResponse = await CreateProductListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Collection The CreateProductList endpoint is used to create a new collection of products within the system. This endpoint allows users to define the details and attributes of the collection.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistCreateProductListResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistCreateProductListResponse>> CreateProductListWithHttpInfoAsync(ProductlistCreateProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->CreateProductList");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.CreateProductList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistCreateProductListResponse>("/productlist.ProductList/CreateProductList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Collection/Product Association The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistCreateProductListAssociationResponse</returns>
        public ProductlistCreateProductListAssociationResponse CreateProductListAssociation(ProductlistCreateProductListAssociationRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistCreateProductListAssociationResponse> localVarResponse = CreateProductListAssociationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Collection/Product Association The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistCreateProductListAssociationResponse</returns>
        public product-list.Client.ApiResponse<ProductlistCreateProductListAssociationResponse> CreateProductListAssociationWithHttpInfo(ProductlistCreateProductListAssociationRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->CreateProductListAssociation");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.CreateProductListAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistCreateProductListAssociationResponse>("/productlist.ProductList/CreateProductListAssociation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductListAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Collection/Product Association The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistCreateProductListAssociationResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistCreateProductListAssociationResponse> CreateProductListAssociationAsync(ProductlistCreateProductListAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistCreateProductListAssociationResponse> localVarResponse = await CreateProductListAssociationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Collection/Product Association The CreateProductListAssociation endpoint is used to create an association between a collection and a product.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistCreateProductListAssociationResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistCreateProductListAssociationResponse>> CreateProductListAssociationWithHttpInfoAsync(ProductlistCreateProductListAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->CreateProductListAssociation");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.CreateProductListAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistCreateProductListAssociationResponse>("/productlist.ProductList/CreateProductListAssociation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductListAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Collection The DeleteProductList endpoint is used to delete an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistDeleteProductListResponse</returns>
        public ProductlistDeleteProductListResponse DeleteProductList(ProductlistDeleteProductListRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistDeleteProductListResponse> localVarResponse = DeleteProductListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Collection The DeleteProductList endpoint is used to delete an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistDeleteProductListResponse</returns>
        public product-list.Client.ApiResponse<ProductlistDeleteProductListResponse> DeleteProductListWithHttpInfo(ProductlistDeleteProductListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->DeleteProductList");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.DeleteProductList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistDeleteProductListResponse>("/productlist.ProductList/DeleteProductList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Collection The DeleteProductList endpoint is used to delete an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistDeleteProductListResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistDeleteProductListResponse> DeleteProductListAsync(ProductlistDeleteProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistDeleteProductListResponse> localVarResponse = await DeleteProductListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Collection The DeleteProductList endpoint is used to delete an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistDeleteProductListResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistDeleteProductListResponse>> DeleteProductListWithHttpInfoAsync(ProductlistDeleteProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->DeleteProductList");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.DeleteProductList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistDeleteProductListResponse>("/productlist.ProductList/DeleteProductList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Collection/Product Association The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistDeleteProductListAssociationResponse</returns>
        public ProductlistDeleteProductListAssociationResponse DeleteProductListAssociation(ProductlistDeleteProductListAssociationRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistDeleteProductListAssociationResponse> localVarResponse = DeleteProductListAssociationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Collection/Product Association The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistDeleteProductListAssociationResponse</returns>
        public product-list.Client.ApiResponse<ProductlistDeleteProductListAssociationResponse> DeleteProductListAssociationWithHttpInfo(ProductlistDeleteProductListAssociationRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->DeleteProductListAssociation");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.DeleteProductListAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistDeleteProductListAssociationResponse>("/productlist.ProductList/DeleteProductListAssociation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductListAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Collection/Product Association The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistDeleteProductListAssociationResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistDeleteProductListAssociationResponse> DeleteProductListAssociationAsync(ProductlistDeleteProductListAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistDeleteProductListAssociationResponse> localVarResponse = await DeleteProductListAssociationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Collection/Product Association The DeleteProductListAssociation endpoint is used to delete an association between a collection and a product.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistDeleteProductListAssociationResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistDeleteProductListAssociationResponse>> DeleteProductListAssociationWithHttpInfoAsync(ProductlistDeleteProductListAssociationRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->DeleteProductListAssociation");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.DeleteProductListAssociation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistDeleteProductListAssociationResponse>("/productlist.ProductList/DeleteProductListAssociation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductListAssociation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection/Product Associations by Product GRN The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListAssociationsByProductGrnResponse</returns>
        public ProductlistGetProductListAssociationsByProductGrnResponse GetProductListAssociationsByProductGrn(ProductlistGetProductListAssociationsByProductGrnRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistGetProductListAssociationsByProductGrnResponse> localVarResponse = GetProductListAssociationsByProductGrnWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection/Product Associations by Product GRN The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListAssociationsByProductGrnResponse</returns>
        public product-list.Client.ApiResponse<ProductlistGetProductListAssociationsByProductGrnResponse> GetProductListAssociationsByProductGrnWithHttpInfo(ProductlistGetProductListAssociationsByProductGrnRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListAssociationsByProductGrn");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListAssociationsByProductGrn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistGetProductListAssociationsByProductGrnResponse>("/productlist.ProductList/GetProductListAssociationsByProductGrn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListAssociationsByProductGrn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection/Product Associations by Product GRN The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListAssociationsByProductGrnResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistGetProductListAssociationsByProductGrnResponse> GetProductListAssociationsByProductGrnAsync(ProductlistGetProductListAssociationsByProductGrnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistGetProductListAssociationsByProductGrnResponse> localVarResponse = await GetProductListAssociationsByProductGrnWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection/Product Associations by Product GRN The GetProductListAssociationsByProductGrn endpoint is used to get the associations between a collection and a list of products by product GRN.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListAssociationsByProductGrnResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistGetProductListAssociationsByProductGrnResponse>> GetProductListAssociationsByProductGrnWithHttpInfoAsync(ProductlistGetProductListAssociationsByProductGrnRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListAssociationsByProductGrn");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListAssociationsByProductGrn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistGetProductListAssociationsByProductGrnResponse>("/productlist.ProductList/GetProductListAssociationsByProductGrn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListAssociationsByProductGrn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection by Code The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListByCodeResponse</returns>
        public ProductlistGetProductListByCodeResponse GetProductListByCode(ProductlistGetProductListByCodeRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistGetProductListByCodeResponse> localVarResponse = GetProductListByCodeWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection by Code The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListByCodeResponse</returns>
        public product-list.Client.ApiResponse<ProductlistGetProductListByCodeResponse> GetProductListByCodeWithHttpInfo(ProductlistGetProductListByCodeRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListByCode");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListByCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistGetProductListByCodeResponse>("/productlist.ProductList/GetProductListByCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection by Code The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListByCodeResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistGetProductListByCodeResponse> GetProductListByCodeAsync(ProductlistGetProductListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistGetProductListByCodeResponse> localVarResponse = await GetProductListByCodeWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection by Code The GetProductListByCode endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListByCodeResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistGetProductListByCodeResponse>> GetProductListByCodeWithHttpInfoAsync(ProductlistGetProductListByCodeRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListByCode");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListByCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistGetProductListByCodeResponse>("/productlist.ProductList/GetProductListByCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListByCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection by Id The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListByIdResponse</returns>
        public ProductlistGetProductListByIdResponse GetProductListById(ProductlistGetProductListByIdRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistGetProductListByIdResponse> localVarResponse = GetProductListByIdWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection by Id The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListByIdResponse</returns>
        public product-list.Client.ApiResponse<ProductlistGetProductListByIdResponse> GetProductListByIdWithHttpInfo(ProductlistGetProductListByIdRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListById");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistGetProductListByIdResponse>("/productlist.ProductList/GetProductListById", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection by Id The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListByIdResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistGetProductListByIdResponse> GetProductListByIdAsync(ProductlistGetProductListByIdRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistGetProductListByIdResponse> localVarResponse = await GetProductListByIdWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection by Id The GetProductListById endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListByIdResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistGetProductListByIdResponse>> GetProductListByIdWithHttpInfoAsync(ProductlistGetProductListByIdRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListById");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistGetProductListByIdResponse>("/productlist.ProductList/GetProductListById", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection by Url Key The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListByUrlKeyResponse</returns>
        public ProductlistGetProductListByUrlKeyResponse GetProductListByUrlKey(ProductlistGetProductListByUrlKeyRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistGetProductListByUrlKeyResponse> localVarResponse = GetProductListByUrlKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection by Url Key The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListByUrlKeyResponse</returns>
        public product-list.Client.ApiResponse<ProductlistGetProductListByUrlKeyResponse> GetProductListByUrlKeyWithHttpInfo(ProductlistGetProductListByUrlKeyRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListByUrlKey");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListByUrlKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistGetProductListByUrlKeyResponse>("/productlist.ProductList/GetProductListByUrlKey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListByUrlKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection by Url Key The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListByUrlKeyResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistGetProductListByUrlKeyResponse> GetProductListByUrlKeyAsync(ProductlistGetProductListByUrlKeyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistGetProductListByUrlKeyResponse> localVarResponse = await GetProductListByUrlKeyWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection by Url Key The GetProductListByUrlKey endpoint is used to retrieve an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListByUrlKeyResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistGetProductListByUrlKeyResponse>> GetProductListByUrlKeyWithHttpInfoAsync(ProductlistGetProductListByUrlKeyRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListByUrlKey");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListByUrlKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistGetProductListByUrlKeyResponse>("/productlist.ProductList/GetProductListByUrlKey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListByUrlKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection Product Count The GetProductListsCount endpoint is used to get the number of products associated with a collection.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistGetProductListsCountResponse</returns>
        public ProductlistGetProductListsCountResponse GetProductListsCount(ProductlistGetProductListsCountRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistGetProductListsCountResponse> localVarResponse = GetProductListsCountWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection Product Count The GetProductListsCount endpoint is used to get the number of products associated with a collection.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistGetProductListsCountResponse</returns>
        public product-list.Client.ApiResponse<ProductlistGetProductListsCountResponse> GetProductListsCountWithHttpInfo(ProductlistGetProductListsCountRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListsCount");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListsCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistGetProductListsCountResponse>("/productlist.ProductList/GetProductListsCount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListsCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Collection Product Count The GetProductListsCount endpoint is used to get the number of products associated with a collection.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistGetProductListsCountResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistGetProductListsCountResponse> GetProductListsCountAsync(ProductlistGetProductListsCountRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistGetProductListsCountResponse> localVarResponse = await GetProductListsCountWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Collection Product Count The GetProductListsCount endpoint is used to get the number of products associated with a collection.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistGetProductListsCountResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistGetProductListsCountResponse>> GetProductListsCountWithHttpInfoAsync(ProductlistGetProductListsCountRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->GetProductListsCount");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.GetProductListsCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistGetProductListsCountResponse>("/productlist.ProductList/GetProductListsCount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductListsCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Collection/Product Associations The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistListProductListAssociationsResponse</returns>
        public ProductlistListProductListAssociationsResponse ListProductListAssociations(ProductlistListProductListAssociationsRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistListProductListAssociationsResponse> localVarResponse = ListProductListAssociationsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Collection/Product Associations The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistListProductListAssociationsResponse</returns>
        public product-list.Client.ApiResponse<ProductlistListProductListAssociationsResponse> ListProductListAssociationsWithHttpInfo(ProductlistListProductListAssociationsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->ListProductListAssociations");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.ListProductListAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistListProductListAssociationsResponse>("/productlist.ProductList/ListProductListAssociations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductListAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Collection/Product Associations The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistListProductListAssociationsResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistListProductListAssociationsResponse> ListProductListAssociationsAsync(ProductlistListProductListAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistListProductListAssociationsResponse> localVarResponse = await ListProductListAssociationsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Collection/Product Associations The ListProductListAssociations endpoint is used to list the associations between a collection and a list of products.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistListProductListAssociationsResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistListProductListAssociationsResponse>> ListProductListAssociationsWithHttpInfoAsync(ProductlistListProductListAssociationsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->ListProductListAssociations");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.ListProductListAssociations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistListProductListAssociationsResponse>("/productlist.ProductList/ListProductListAssociations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductListAssociations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Collections The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistListProductListsResponse</returns>
        public ProductlistListProductListsResponse ListProductLists(ProductlistListProductListsRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistListProductListsResponse> localVarResponse = ListProductListsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Collections The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistListProductListsResponse</returns>
        public product-list.Client.ApiResponse<ProductlistListProductListsResponse> ListProductListsWithHttpInfo(ProductlistListProductListsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->ListProductLists");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.ListProductLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistListProductListsResponse>("/productlist.ProductList/ListProductLists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Collections The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistListProductListsResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistListProductListsResponse> ListProductListsAsync(ProductlistListProductListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistListProductListsResponse> localVarResponse = await ListProductListsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Collections The ListProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistListProductListsResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistListProductListsResponse>> ListProductListsWithHttpInfoAsync(ProductlistListProductListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->ListProductLists");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.ListProductLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistListProductListsResponse>("/productlist.ProductList/ListProductLists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Collections The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistSearchProductListsResponse</returns>
        public ProductlistSearchProductListsResponse SearchProductLists(ProductlistSearchProductListsRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistSearchProductListsResponse> localVarResponse = SearchProductListsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Collections The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistSearchProductListsResponse</returns>
        public product-list.Client.ApiResponse<ProductlistSearchProductListsResponse> SearchProductListsWithHttpInfo(ProductlistSearchProductListsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->SearchProductLists");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.SearchProductLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistSearchProductListsResponse>("/productlist.ProductList/SearchProductLists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Collections The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistSearchProductListsResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistSearchProductListsResponse> SearchProductListsAsync(ProductlistSearchProductListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistSearchProductListsResponse> localVarResponse = await SearchProductListsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Collections The SearchProductLists endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistSearchProductListsResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistSearchProductListsResponse>> SearchProductListsWithHttpInfoAsync(ProductlistSearchProductListsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->SearchProductLists");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.SearchProductLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistSearchProductListsResponse>("/productlist.ProductList/SearchProductLists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Collections by Ids The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistSearchProductListsByIdsResponse</returns>
        public ProductlistSearchProductListsByIdsResponse SearchProductListsByIds(ProductlistSearchProductListsByIdsRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistSearchProductListsByIdsResponse> localVarResponse = SearchProductListsByIdsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Collections by Ids The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistSearchProductListsByIdsResponse</returns>
        public product-list.Client.ApiResponse<ProductlistSearchProductListsByIdsResponse> SearchProductListsByIdsWithHttpInfo(ProductlistSearchProductListsByIdsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->SearchProductListsByIds");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.SearchProductListsByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistSearchProductListsByIdsResponse>("/productlist.ProductList/SearchProductListsByIds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductListsByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Collections by Ids The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistSearchProductListsByIdsResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistSearchProductListsByIdsResponse> SearchProductListsByIdsAsync(ProductlistSearchProductListsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistSearchProductListsByIdsResponse> localVarResponse = await SearchProductListsByIdsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Collections by Ids The SearchProductListsByIds endpoint is used to retrieve a list of existing collections of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistSearchProductListsByIdsResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistSearchProductListsByIdsResponse>> SearchProductListsByIdsWithHttpInfoAsync(ProductlistSearchProductListsByIdsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->SearchProductListsByIds");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.SearchProductListsByIds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistSearchProductListsByIdsResponse>("/productlist.ProductList/SearchProductListsByIds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchProductListsByIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Collection The UpdateProductList endpoint is used to update an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductlistUpdateProductListResponse</returns>
        public ProductlistUpdateProductListResponse UpdateProductList(ProductlistUpdateProductListRequest body, int operationIndex = 0)
        {
            product-list.Client.ApiResponse<ProductlistUpdateProductListResponse> localVarResponse = UpdateProductListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Collection The UpdateProductList endpoint is used to update an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductlistUpdateProductListResponse</returns>
        public product-list.Client.ApiResponse<ProductlistUpdateProductListResponse> UpdateProductListWithHttpInfo(ProductlistUpdateProductListRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->UpdateProductList");
            }

            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.UpdateProductList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductlistUpdateProductListResponse>("/productlist.ProductList/UpdateProductList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Collection The UpdateProductList endpoint is used to update an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductlistUpdateProductListResponse</returns>
        public async System.Threading.Tasks.Task<ProductlistUpdateProductListResponse> UpdateProductListAsync(ProductlistUpdateProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            product-list.Client.ApiResponse<ProductlistUpdateProductListResponse> localVarResponse = await UpdateProductListWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Collection The UpdateProductList endpoint is used to update an existing collection of products within the system.
        /// </summary>
        /// <exception cref="product-list.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductlistUpdateProductListResponse)</returns>
        public async System.Threading.Tasks.Task<product-list.Client.ApiResponse<ProductlistUpdateProductListResponse>> UpdateProductListWithHttpInfoAsync(ProductlistUpdateProductListRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new product-list.Client.ApiException(400, "Missing required parameter 'body' when calling ProductListApi->UpdateProductList");
            }


            product-list.Client.RequestOptions localVarRequestOptions = new product-list.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = product-list.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = product-list.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ProductListApi.UpdateProductList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductlistUpdateProductListResponse>("/productlist.ProductList/UpdateProductList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
